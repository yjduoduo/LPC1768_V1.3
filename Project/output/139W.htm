<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\139W.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\139W.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri Feb 14 15:41:02 2014
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Run_Task &rArr; DisplayKeyMenu &rArr; Systemp_Task &rArr; Sure_Task &rArr; CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[20e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT1_IRQHandler</a> from extint.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT3_IRQHandler</a> from extint.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from i2c.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">PWM1_IRQHandler</a> from pwm.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from delay.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[d]">TIMER0_IRQHandler</a> from ctime.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER1_IRQHandler</a> from ctime.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[32]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[34]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[210]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[211]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[212]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[213]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[214]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[35]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[215]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[216]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[217]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[218]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[219]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[220]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[221]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[222]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[223]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[224]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[225]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[226]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[227]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[3e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[228]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[229]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[22a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[22b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[22d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[33]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[22f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Run_Task &rArr; DisplayKeyMenu &rArr; Systemp_Task &rArr; Sure_Task &rArr; CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[230]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[46]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[231]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; Run_Task &rArr; DisplayKeyMenu &rArr; Systemp_Task &rArr; Sure_Task &rArr; CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Task
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[232]"></a>delay1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>DelayUs2x</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
</UL>

<P><STRONG><a name="[44]"></a>Delay1Ms</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay1Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs2x
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
</UL>

<P><STRONG><a name="[f6]"></a>Relay_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, crelay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[129]"></a>Fire_Relay_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crelay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[159]"></a>Fire_Relay_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crelay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
</UL>

<P><STRONG><a name="[132]"></a>Fault_Relay_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crelay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[135]"></a>Fault_Relay_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crelay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[82]"></a>State_0mA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csetcurrent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendFireInfo
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Addr
</UL>

<P><STRONG><a name="[152]"></a>State_6mA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, csetcurrent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendFireInfo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sel_Addr_fire
</UL>

<P><STRONG><a name="[15a]"></a>State_20mA</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, csetcurrent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendFireInfo
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendAlarmInfo
</UL>

<P><STRONG><a name="[233]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[236]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[237]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[2f]"></a>SystemInit</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>SystemClockUpdate</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[238]"></a>SSP_SSELToggle</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ssp.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>SSP1_Init</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[48]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_Bytes
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_S1B
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>

<P><STRONG><a name="[47]"></a>M25P80_CMD1B</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M25P80_CMD1B
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Bulk_Erase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
</UL>

<P><STRONG><a name="[49]"></a>M25P80_CMD1B_READ1B</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M25P80_CMD1B_READ1B
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
</UL>

<P><STRONG><a name="[4a]"></a>M25P80_CMD1B_S1B</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
</UL>

<P><STRONG><a name="[4b]"></a>M25P80_Write_En</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M25P80_Write_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_S1B
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Bulk_Erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>

<P><STRONG><a name="[4c]"></a>M25P80_WP_En</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_S1B
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B_READ1B
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Bulk_Erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>

<P><STRONG><a name="[4d]"></a>M25P80_Busy</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M25P80_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_Bytes
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Bulk_Erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>

<P><STRONG><a name="[4e]"></a>M25P80_Section_Erase</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M25P80_Section_Erase &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveAnn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMaskPSN
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveHist
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToFlash
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToFlash
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSendPSNToFlash
</UL>

<P><STRONG><a name="[4f]"></a>M25P80_Bulk_Erase</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_CMD1B
</UL>

<P><STRONG><a name="[50]"></a>M25P80_Write_1Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveAnn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMaskPSN
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveHist
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToFlash
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSendPSNToFlash
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistToFlash
</UL>

<P><STRONG><a name="[51]"></a>M25P80_Write_Bytes</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_WP_En
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_En
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToFlash
</UL>

<P><STRONG><a name="[52]"></a>M25P80_Read_1Byte</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnCounterInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com0Data_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaskPSN
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskPSNInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFalshData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToF_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlashPsn
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGetPSNFromFlash
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistConterInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistory
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHistPara
</UL>

<P><STRONG><a name="[53]"></a>M25P80_Read_Bytes</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ssp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Busy
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[239]"></a>SSPSend</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ssp.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>SSPReceive</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ssp.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>Wait_I2c_End</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRcvByte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISendByte
</UL>

<P><STRONG><a name="[54]"></a>I2C0_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C0_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[ef]"></a>I2CIntEnd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInt
</UL>

<P><STRONG><a name="[57]"></a>I2CIntStart</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CIntStart &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInt
</UL>

<P><STRONG><a name="[58]"></a>ISendByte</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>

<P><STRONG><a name="[5a]"></a>IRcvByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>

<P><STRONG><a name="[5b]"></a>I2C_ReadNByte</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_INT_State
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Get_TD
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_TD
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
</UL>

<P><STRONG><a name="[5c]"></a>I2C_WriteNByte</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_I2c_End
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_INT_State
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Timer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Alarm
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_ClkOut
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_TD
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SS
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
</UL>

<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 576 bytes, Stack size 0 bytes, i2c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ClrData3</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>Com0Data_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Com0Data_Init &rArr; M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
</UL>

<P><STRONG><a name="[ff]"></a>GetCom0Ann</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annotate_Menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
</UL>

<P><STRONG><a name="[123]"></a>Cleartp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[e3]"></a>GetAnnRow</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetAnnRow
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annotate_Menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
</UL>

<P><STRONG><a name="[145]"></a>GetCom1Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCom1Data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCom0Data
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHeart
</UL>

<P><STRONG><a name="[122]"></a>ClrCom1Data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[5e]"></a>CSaveAnn</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CSaveAnn &rArr; M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleAnnFun
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
</UL>

<P><STRONG><a name="[5f]"></a>AnnCounterInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AnnCounterInit &rArr; M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_IRQHandler &rArr; UartCom &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeartFaultFlag
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConvertdata
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCom1Data
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComRegFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareAddr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGetIntenFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23b]"></a>GetAnnFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>HandleAnnFun</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HandleAnnFun &rArr; CSaveAnn &rArr; M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveAnn
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Task
</UL>

<P><STRONG><a name="[23c]"></a>SaveAnnFun</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>Uart0SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendString
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlag_195
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnUartFlag
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0SendByte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrData3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UARTInit</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTInit &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[6f]"></a>UartIntEnd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartIntEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInt
</UL>

<P><STRONG><a name="[71]"></a>UartIntStart</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartIntStart &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInt
</UL>

<P><STRONG><a name="[11c]"></a>UARTSend</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Com
</UL>

<P><STRONG><a name="[74]"></a>Uart1SendByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendString
</UL>

<P><STRONG><a name="[72]"></a>UART0_SendString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0SendByte
</UL>

<P><STRONG><a name="[73]"></a>UART1_SendString</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendByte
</UL>

<P><STRONG><a name="[76]"></a>uart1GetByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1GetStr
</UL>

<P><STRONG><a name="[78]"></a>uart0GetByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0GetStr
</UL>

<P><STRONG><a name="[75]"></a>uart1GetStr</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1GetByte
</UL>

<P><STRONG><a name="[77]"></a>uart0GetStr</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0GetByte
</UL>

<P><STRONG><a name="[f2]"></a>GPIOinit</STRONG> (Thumb, 446 bytes, Stack size 0 bytes, gpioinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[79]"></a>Eint1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Eint1_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[7c]"></a>Eint3_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Eint3_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[7d]"></a>Eint_Dis</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Eint_Dis
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInt
</UL>

<P><STRONG><a name="[7f]"></a>Eint_En</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Eint_En &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInt
</UL>

<P><STRONG><a name="[80]"></a>SetE1_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT1_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>EINT1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EINT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetE1_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ClrE3_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>SetE3_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>EINT3_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EINT3_IRQHandler &rArr; CirAddrCounter &rArr; Check_Addr &rArr; Compare_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_0mA
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistFlag
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrTimer0Counter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAddrCounter
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetE3_flag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrE3_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>ClrE1_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[169]"></a>GetE1_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[23d]"></a>GetE3_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, extint.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>cExt3IntFlow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, extint.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>cExt3IntRise</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, extint.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>cExt3IntClrFlow</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, extint.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>cExt3IntClrRise</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, extint.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>init_timer</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_timer &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[8a]"></a>Init_CTime0</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ctime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[8b]"></a>Init_CTime1</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ctime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[242]"></a>SetTimeTickCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctime.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>GetTimeTickCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctime.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>SetHeartTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
</UL>

<P><STRONG><a name="[15c]"></a>GetHeartTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
</UL>

<P><STRONG><a name="[244]"></a>AddSpeakerTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctime.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>SetSpeakerTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breeze_Controll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeaker_Alarm
</UL>

<P><STRONG><a name="[eb]"></a>GetSpeakerTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breeze_Controll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeaker_Alarm
</UL>

<P><STRONG><a name="[8c]"></a>CLedShow</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLedShow
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Wireless_On
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Wireless_Off
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Run_On
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Run_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IRQHandler &rArr; Reset_Alarm &rArr; Compare_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Alarm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF195
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZjFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendFireInfo
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendAlarmInfo
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer0Counter
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLedShow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>CSpeakerPWM</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CSpeakerPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER1_IRQHandler &rArr; Scan_Key &rArr; Delay1Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZjFlag
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeakerPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>OpenLCD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ctime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[c4]"></a>enable_timer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ctime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGet_KeyValue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInt
</UL>

<P><STRONG><a name="[bd]"></a>disable_timer</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, ctime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInt
</UL>

<P><STRONG><a name="[245]"></a>reset_timer</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ctime.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>Get_CTime0Def</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>Set_CTime0Def</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>Sel_CTime0Def</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>Get_Timer_100us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctimedef.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[249]"></a>Get_Timer_600us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>Get_Timer_2ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>Get_Timer_5ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>Get_Timer_8ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>Get_Timer_10ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctimedef.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>Get_Timer_20ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctimedef.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[91]"></a>AddTimer0Counter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctimedef.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>ClrTimer0Counter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctimedef.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAddrCounter
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>GetTimer0Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctimedef.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Alarm
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendFireInfo
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirSendAlarmInfo
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAddrCounter
</UL>

<P><STRONG><a name="[15]"></a>PWM1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>PWM_Init</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[9a]"></a>PWM1_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeakerPWM
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
</UL>

<P><STRONG><a name="[99]"></a>PWM1_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeakerPWM
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
</UL>

<P><STRONG><a name="[9b]"></a>PWM1_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGet_KeyValue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeakerPWM
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[1c9]"></a>DelayMs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
</UL>

<P><STRONG><a name="[9e]"></a>DATAout</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DATAout
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlackByte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToLCD
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState
</UL>

<P><STRONG><a name="[9d]"></a>CheckState</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAout
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlackByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDoubleByte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToLCD
</UL>

<P><STRONG><a name="[9f]"></a>SendCommandToLCD</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAout
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOnOff
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartLine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>

<P><STRONG><a name="[a0]"></a>SetLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetLine &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBlack
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear16Screen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>

<P><STRONG><a name="[a1]"></a>SetStartLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetStartLine &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[a2]"></a>SetColumn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBlack
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear16Screen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>

<P><STRONG><a name="[a3]"></a>SetOnOff</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetOnOff &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandToLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[a4]"></a>WriteByte</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteByte &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAout
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear16Screen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>

<P><STRONG><a name="[a5]"></a>WriteDoubleByte</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState
</UL>

<P><STRONG><a name="[a6]"></a>WriteBlackByte</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteBlackByte &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAout
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
</UL>

<P><STRONG><a name="[a8]"></a>SelectScreen</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBlack
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear16Screen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
</UL>

<P><STRONG><a name="[a7]"></a>ClearScreen</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClearScreen &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTestGrap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetGrap
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckGrap
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainGrap
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel27_Sure
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Return
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Return
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlarmInfo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[a9]"></a>Clear16Screen</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>

<P><STRONG><a name="[24e]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>delay_long</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>InitLCD</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitLCD &rArr; ClearScreen &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOnOff
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStartLine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckState
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[250]"></a>WriteBytedata</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>DisplayJBHZKBlack</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DisplayJBHZKBlack &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlackByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSelectBlack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
</UL>

<P><STRONG><a name="[ac]"></a>DisplayJBHZK</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysReset_Menu
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CModFault
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSelf_Menu
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annotate_Menu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSelect
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu1
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveInfo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waiting_menu
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Open_Close
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;His_Reset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_OK
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Menu
</UL>

<P><STRONG><a name="[ad]"></a>Display</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Display &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Menu
</UL>

<P><STRONG><a name="[ae]"></a>DisplayBlack</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>

<P><STRONG><a name="[af]"></a>Display1</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Display1 &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annotate_Menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Menu
</UL>

<P><STRONG><a name="[251]"></a>DisplaynumberJBHZK</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>Displaynumber</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Displaynumber &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annotate_Menu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu1
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Open_Close
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Menu
</UL>

<P><STRONG><a name="[b1]"></a>DisplaynumberBlack</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DisplaynumberBlack &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectScreen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBlackByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annotate_Menu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
</UL>

<P><STRONG><a name="[b2]"></a>WriteBlue</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetColumn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLine
</UL>

<P><STRONG><a name="[b3]"></a>PCF8563_Set</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCF8563_Set &rArr; I2C_WriteNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
</UL>

<P><STRONG><a name="[b4]"></a>PCF8563_Read</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PCF8563_Read &rArr; I2C_ReadNByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Menu
</UL>

<P><STRONG><a name="[b5]"></a>PCF8563_SS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Init
</UL>

<P><STRONG><a name="[b6]"></a>PCF8563_Set_TD</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>

<P><STRONG><a name="[b7]"></a>PCF8563_Get_TD</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>

<P><STRONG><a name="[b8]"></a>PCF8563_Set_ClkOut</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>

<P><STRONG><a name="[b9]"></a>PCF8563_Set_Alarm</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>

<P><STRONG><a name="[ba]"></a>PCF8563_Set_Timer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Init
</UL>

<P><STRONG><a name="[bb]"></a>PCF8563_INT_State</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteNByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Init
</UL>

<P><STRONG><a name="[bc]"></a>PCF8563_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pcf8563.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_INT_State
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set_Timer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SS
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
</UL>

<P><STRONG><a name="[16c]"></a>GetBackValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[c7]"></a>ClrBackValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGet_KeyValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[9c]"></a>Scan_Key</STRONG> (Thumb, 574 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Scan_Key &rArr; Delay1Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_On
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_Off
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplay_alarm_flag
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLCD
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>CGet_KeyValue</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CGet_KeyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordFlag
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSetAlarmFlag
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBackValue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
</UL>

<P><STRONG><a name="[cf]"></a>Led_Fire_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Off
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
</UL>

<P><STRONG><a name="[ce]"></a>Led_Fault_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Off
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[90]"></a>Led_Wireless_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Off
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLedShow
</UL>

<P><STRONG><a name="[c2]"></a>Led_Silence_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Off
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[8f]"></a>Led_Run_Off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Off
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLedShow
</UL>

<P><STRONG><a name="[cd]"></a>Led_Fire_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[cc]"></a>Led_Fault_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[cb]"></a>Led_Wireless_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[ca]"></a>Led_Silence_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[c9]"></a>Led_Run_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[c8]"></a>Led_Init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, cled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Run_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Wireless_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fire_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_Off
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fire_Off
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_Off
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Wireless_Off
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Run_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[d2]"></a>Led_Fire_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_On
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[d1]"></a>Led_Fault_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_On
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[8e]"></a>Led_Wireless_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_On
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLedShow
</UL>

<P><STRONG><a name="[c1]"></a>Led_Silence_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_On
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
</UL>

<P><STRONG><a name="[8d]"></a>Led_Run_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_On
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLedShow
</UL>

<P><STRONG><a name="[d0]"></a>Led_On</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, cled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_On
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fire_On
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_On
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Wireless_On
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Run_On
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
</UL>

<P><STRONG><a name="[d3]"></a>Led_Off</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, cled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_Off
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fire_Off
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_Off
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Wireless_Off
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Run_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
</UL>

<P><STRONG><a name="[13c]"></a>SetLocalAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1fe]"></a>AddLocalAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1e1]"></a>SubLocalAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[13e]"></a>GetLocalAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[17c]"></a>AddLocalParaSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[17e]"></a>SetLocalParaSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[17d]"></a>GetLocalParaSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[13d]"></a>SetLocalDepSum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[1ff]"></a>AddLocalDepSum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1e2]"></a>SubLocalDepSum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[13f]"></a>GetLocalDepSum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[136]"></a>SetComRegFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[62]"></a>GetComRegFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[17f]"></a>AddCompRegParaSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[180]"></a>SetCompRegParaSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[137]"></a>GetCompRegParaSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1bb]"></a>SetCompRegDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[200]"></a>AddCompRegDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1e3]"></a>SubCompRegDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[13a]"></a>GetCompRegDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1e5]"></a>SetCompRegNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[201]"></a>AddCompRegNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1e4]"></a>SubCompRegNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[139]"></a>GetCompRegNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1bc]"></a>SetCompRegAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[202]"></a>AddCompRegAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1e6]"></a>SubCompRegAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[138]"></a>GetCompRegAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[203]"></a>AddCompSetDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1e7]"></a>SubCompSetDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[186]"></a>GetCompSetDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1e8]"></a>SetCompSetDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[204]"></a>AddCompSetNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1e9]"></a>SubCompSetNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[185]"></a>GetCompSetNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1ea]"></a>SetCompSetNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1ec]"></a>SetComSetSelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[205]"></a>AddComSetSelSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1eb]"></a>SubComSetSelSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[184]"></a>GetComSetSelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[181]"></a>AddComSetSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[252]"></a>SubComSetSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>GetComSetSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[183]"></a>SetComSetSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[1bd]"></a>SetYear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
</UL>

<P><STRONG><a name="[206]"></a>AddYear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1ed]"></a>SubYear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[18f]"></a>GetYear</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1be]"></a>SetMonth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[207]"></a>AddMonth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1ee]"></a>SubMonth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[18e]"></a>GetMonth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[208]"></a>AddDay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1ef]"></a>SubDay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[18d]"></a>GetDay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1bf]"></a>SetDay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1c0]"></a>SetHour</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[209]"></a>AddHour</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1f0]"></a>SubHour</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[18c]"></a>GetHour</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1c1]"></a>SetMintue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[20a]"></a>AddMintue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1f1]"></a>SubMintue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[18b]"></a>GetMintue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[1c2]"></a>SetSecond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[20b]"></a>AddSecond</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
</UL>

<P><STRONG><a name="[1f2]"></a>SubSecond</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[18a]"></a>GetSecond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[189]"></a>SetSelTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[187]"></a>AddSelTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[188]"></a>GetSelTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[253]"></a>SetAnnDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>AddAnnDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>SubAnnDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>GetAnnDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[256]"></a>SetAnnCompNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>AddAnnCompNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>SubAnnCompNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>GetAnnCompNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[192]"></a>SetAnnSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[190]"></a>AddAnnSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[191]"></a>GetAnnSel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[1fa]"></a>AddSysCheckDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
</UL>

<P><STRONG><a name="[1db]"></a>SubSysCheckDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[1ce]"></a>SetSysCheckDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
</UL>

<P><STRONG><a name="[1c3]"></a>GetSysCheckDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[1fb]"></a>AddStatusDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
</UL>

<P><STRONG><a name="[1dc]"></a>SubStatusDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[1dd]"></a>SetStatusDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[199]"></a>GetStatusDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[1fc]"></a>AddStatusComp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
</UL>

<P><STRONG><a name="[1de]"></a>SubStatusComp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[1df]"></a>SetStatusComp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[198]"></a>GetStatusComp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[195]"></a>AddStatusFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[197]"></a>SetStatusFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[196]"></a>GetStatusFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[1f5]"></a>AddIntenDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
</UL>

<P><STRONG><a name="[1d8]"></a>SubIntenDep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[1f6]"></a>SetIntenDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
</UL>

<P><STRONG><a name="[1d1]"></a>GetIntenDep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[1f7]"></a>AddIntenComp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
</UL>

<P><STRONG><a name="[1d9]"></a>SubIntenComp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[1f8]"></a>SetIntenComp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
</UL>

<P><STRONG><a name="[1d0]"></a>GetIntenComp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[19a]"></a>AddIntenFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[19c]"></a>SetIntenFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[19b]"></a>GetIntenFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cgrapparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[d5]"></a>SetHistConter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveHist
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistConterInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHistPara
</UL>

<P><STRONG><a name="[d6]"></a>GetHistConter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveHist
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HistConterInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHistPara
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[d4]"></a>InitHistPara</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InitHistPara &rArr; M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistConter
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[81]"></a>SetHistFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>GetHistFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveHist
</UL>

<P><STRONG><a name="[e4]"></a>SetHistoryList</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetHistoryList
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
</UL>

<P><STRONG><a name="[259]"></a>ClrHistoryList</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>GetHistoryList</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[25a]"></a>AddPageConter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>SetPageConter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>GetPageConter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveHist
</UL>

<P><STRONG><a name="[d7]"></a>SendHistToFlash</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SendHistToFlash &rArr; M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveHist
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
</UL>

<P><STRONG><a name="[d8]"></a>GetHistory</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetHistory &rArr; M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[e6]"></a>AddHistConter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
</UL>

<P><STRONG><a name="[d9]"></a>HistConterInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cflashparam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistConter
</UL>

<P><STRONG><a name="[140]"></a>CSendPSN</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CSendPSN
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[1cf]"></a>CheckDepComp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckDepComp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
</UL>

<P><STRONG><a name="[1c4]"></a>GetCompSum</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[116]"></a>GetDepComp_Sum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
</UL>

<P><STRONG><a name="[1cd]"></a>CAmendPSNToFlash</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
</UL>

<P><STRONG><a name="[da]"></a>CSendPSNToFlash</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CSendPSNToFlash &rArr; M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[db]"></a>CGetPSNFromFlash</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CGetPSNFromFlash &rArr; M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
</UL>

<P><STRONG><a name="[1ba]"></a>CPSNToFlashInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[e2]"></a>GetPSNFormFlash</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareAddr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareCirAddr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[25c]"></a>GetDatatoFlashAddr</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>GetNum</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[25d]"></a>CAddCirCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>CSetCirCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>CGetCirCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>GetRow</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetRow
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
</UL>

<P><STRONG><a name="[dc]"></a>SaveDataToFlash</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cflashparam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_Bytes
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>

<P><STRONG><a name="[127]"></a>JudgeAlarmType</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[130]"></a>JudgeCompAlarmType</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[11e]"></a>SetDatatoFlash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetDatatoFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
</UL>

<P><STRONG><a name="[e5]"></a>GetDatatoFlash</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHistoryList
</UL>

<P><STRONG><a name="[158]"></a>ClrDatatoFlash</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cflashparam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClrDatatoFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
</UL>

<P><STRONG><a name="[260]"></a>GetDatatoFlashType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>GetDatatoFlashAlarmType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>SetFlashData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>SetDepCompSum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cflashparam.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
</UL>

<P><STRONG><a name="[148]"></a>GetDepCompSum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com0DataUnzip
</UL>

<P><STRONG><a name="[dd]"></a>GetFlashPsn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cflashparam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>

<P><STRONG><a name="[263]"></a>ReadFlashPsn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>SetCom0Ann</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cflashparam.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com0DataUnzip
</UL>

<P><STRONG><a name="[de]"></a>SendToF_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, csendtoflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendToF_Init &rArr; M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[13b]"></a>SendToArray</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csendtoflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[df]"></a>SendDataToFlash</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, csendtoflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SendDataToFlash &rArr; M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[e8]"></a>GetSendToF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csendtoflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Alarm
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sel_Addr_fire
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Address
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegNum
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumRegNum
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[e0]"></a>CheckFalshData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, csendtoflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>

<P><STRONG><a name="[264]"></a>FlashFault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, csendtoflash.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>SaveHistoryList</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, csendtoflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDatatoFlash
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHistConter
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistToFlash
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistoryList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistConter
</UL>

<P><STRONG><a name="[e7]"></a>GetSumRegNum</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cgetcompsum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSumRegNum
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[e9]"></a>GetRegNum</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, cgetcompsum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
</UL>

<P><STRONG><a name="[265]"></a>CSpeaker_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cspeaker.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>CSpeaker_Alarm</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, cspeaker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeakerTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeakerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreezeAlarm
</UL>

<P><STRONG><a name="[ed]"></a>Breeze_Controll</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cspeaker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpeakerTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeakerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreezeAlarm
</UL>

<P><STRONG><a name="[ee]"></a>EndInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cintstend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EndInt &rArr; Eint_Dis
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint_Dis
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntEnd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[f0]"></a>StartInt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cintstend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartInt &rArr; Eint_En &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint_En
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntStart
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[41]"></a>Hardware_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, initialization.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Hardware_init &rArr; InitLCD &rArr; ClearScreen &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Timer_20ms
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Timer_100us
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint3_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint1_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOinit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>Task_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, initialization.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Task_init &rArr; Start_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnCounterInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com0Data_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Menu
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskPSNInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareCirAddr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAlarmDataInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfoInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToF_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGetPSNFromFlash
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistory
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHistPara
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>Alarm_Menu</STRONG> (Thumb, 1822 bytes, Stack size 96 bytes, alarmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Alarm_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom0Ann
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlarmInfo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[100]"></a>Battery_Low</STRONG> (Thumb, 1724 bytes, Stack size 96 bytes, batterylow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Battery_Low &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom0Ann
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlarmInfo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[101]"></a>Breakdown</STRONG> (Thumb, 1720 bytes, Stack size 88 bytes, breakdown.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Breakdown &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom0Ann
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlarmInfo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[102]"></a>Check_Menu</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, checkmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Check_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckGrap
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Return
</UL>

<P><STRONG><a name="[103]"></a>Main_Menu</STRONG> (Thumb, 706 bytes, Stack size 56 bytes, mainmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Main_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainGrap
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Return
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[104]"></a>Reset_OK</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mainmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Reset_OK &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[105]"></a>His_Reset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mainmenu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>

<P><STRONG><a name="[106]"></a>Speaker_Open_Close</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, mainmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Speaker_Open_Close &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel27_Sure
</UL>

<P><STRONG><a name="[107]"></a>Waiting_menu</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mainmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Waiting_menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[108]"></a>Set_Menu</STRONG> (Thumb, 698 bytes, Stack size 48 bytes, setmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Set_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetGrap
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
</UL>

<P><STRONG><a name="[109]"></a>CSaveInfo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, setmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CSaveInfo &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
</UL>

<P><STRONG><a name="[10a]"></a>Set_Menu1</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, setmenu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>

<P><STRONG><a name="[f8]"></a>Start_Menu</STRONG> (Thumb, 654 bytes, Stack size 24 bytes, startmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Start_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[10b]"></a>Test_Menu</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, testmenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Test_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTestGrap
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
</UL>

<P><STRONG><a name="[10c]"></a>Test_Menu1</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, testmenu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[10d]"></a>Local_Menu</STRONG> (Thumb, 940 bytes, Stack size 64 bytes, clocalset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Local_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[10e]"></a>CompReg_menu</STRONG> (Thumb, 1324 bytes, Stack size 64 bytes, ccompreg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CompReg_menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[10f]"></a>GNSelectBlack</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ccompset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GNSelectBlack &rArr; DisplayJBHZKBlack &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
</UL>

<P><STRONG><a name="[110]"></a>GNSelect</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ccompset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GNSelect &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
</UL>

<P><STRONG><a name="[111]"></a>CompSet_Menu</STRONG> (Thumb, 744 bytes, Stack size 56 bytes, ccompset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CompSet_Menu &rArr; GNSelect &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZKBlack
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSelect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSelectBlack
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[112]"></a>DateMod_Menu</STRONG> (Thumb, 2686 bytes, Stack size 72 bytes, cdatemod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DateMod_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
</UL>

<P><STRONG><a name="[113]"></a>Annotate_Menu</STRONG> (Thumb, 992 bytes, Stack size 64 bytes, cannotate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Annotate_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom0Ann
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[114]"></a>CompStat_Menu</STRONG> (Thumb, 1746 bytes, Stack size 120 bytes, ccompstat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom0Ann
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[115]"></a>SysCheck_Menu</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, csyscheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysCheck_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaynumberBlack
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDepComp_Sum
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[117]"></a>CompInten_Menu</STRONG> (Thumb, 1150 bytes, Stack size 80 bytes, ccompinten.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CompInten_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[1ca]"></a>CSetIntenFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompinten.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
</UL>

<P><STRONG><a name="[65]"></a>CGetIntenFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompinten.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[118]"></a>History_Menu</STRONG> (Thumb, 2006 bytes, Stack size 120 bytes, chistorylist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = History_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom0Ann
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
</UL>

<P><STRONG><a name="[119]"></a>TestSelf_Menu</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ctestself.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TestSelf_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
</UL>

<P><STRONG><a name="[11a]"></a>CModFault</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, cmodelfault.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CModFault &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
</UL>

<P><STRONG><a name="[11b]"></a>SysReset_Menu</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, csysreset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysReset_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[14e]"></a>SetFirstAlarm_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCirAlarmData
</UL>

<P><STRONG><a name="[12f]"></a>SetDisplay_alarm_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCirAlarmData
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[c0]"></a>GetDisplay_alarm_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[12e]"></a>Setdisplay_alarm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[16f]"></a>Getdisplay_alarm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[16e]"></a>Getalarmtime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[14d]"></a>SetSum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCirAlarmData
</UL>

<P><STRONG><a name="[266]"></a>GetSum</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccomhandle.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>SetBJNum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ccomhandle.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>GetBJNum</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ccomhandle.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>SetCheckInfoFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[269]"></a>GetCheckInfoFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccomhandle.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>SetConvertdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
</UL>

<P><STRONG><a name="[26a]"></a>GetConvertdata</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccomhandle.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>UartCom</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ccomhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartCom &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[121]"></a>UartCheck</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, ccomhandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[66]"></a>CompareAddr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ccomhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CompareAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[11d]"></a>CSaveDatatoFlash</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, ccomhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CSaveDatatoFlash &rArr; SendHistToFlash &rArr; M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnRow
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDatatoFlash
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDatatoFlash
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHistConter
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistToFlash
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistoryList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistConter
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[11f]"></a>UartComHandle</STRONG> (Thumb, 2934 bytes, Stack size 64 bytes, ccomhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UartComHandle &rArr; Battery_Low &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegNum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegDep
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegParaSel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComRegFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Relay_Off
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Relay_On
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire_Relay_On
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_On
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fire_On
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_Off
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_Off
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSetAlarmFlag
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmFlag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLCD
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeartFaultFlag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComRegFlag
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareAddr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGetIntenFlag
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCom1Data
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleartp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Com
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReleaseFlag
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMenuFlag
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlagLed
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstAlarm_Addr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCirAlarmData
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCirAddrCurrent
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm_Circuit_Flag
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReleaseFlag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFirstAlarm_Addr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCirAddrCurrent
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrComData
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGetMaskPSN
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveDatatoFlash
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setdisplay_alarm
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplay_alarm_flag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumRegNum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToFlash
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToArray
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDatatoFlash
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDatatoFlash
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeCompAlarmType
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeAlarmType
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNum
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSendPSNToFlash
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSendPSN
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Task
</UL>

<P><STRONG><a name="[26b]"></a>GetHeart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>ReadHeart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom1Data
</UL>

<P><STRONG><a name="[146]"></a>ReadCom0Data</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom1Data
</UL>

<P><STRONG><a name="[60]"></a>ReadCom1Data</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ccompara.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadCom1Data
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCom1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>ClrComData</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[120]"></a>GetComData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[26c]"></a>AddBattLowSum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>GetBattLowSum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>AddBrokenSum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>GetBrokenSum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>AddAlarmSum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>GetAlarmSum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>MergeData</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com0Handle
</UL>

<P><STRONG><a name="[147]"></a>Com0DataUnzip</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCom0Ann
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDepCompSum
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com0Handle
</UL>

<P><STRONG><a name="[14a]"></a>Com0Handle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com0DataUnzip
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MergeData
</UL>

<P><STRONG><a name="[272]"></a>AddHeartFaultFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>SetHeartFaultFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[15e]"></a>GetHeartFaultFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
</UL>

<P><STRONG><a name="[bf]"></a>SetAlarmFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF195
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel27_Sure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[98]"></a>GetAlarmFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF195
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeakerPWM
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BreezeAlarm
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[12c]"></a>SetFirstAlarm_Addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[131]"></a>GetFirstAlarm_Addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[fa]"></a>AlarmInfoInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ccompara.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AlarmInfoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[178]"></a>GetAlarmInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlarmInfo
</UL>

<P><STRONG><a name="[273]"></a>SetAlarmInfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>AddAlarmInfoFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>SubAlarmInfoFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>SetAlarmInfoFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>GetAlarmInfoFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlarmInfo
</UL>

<P><STRONG><a name="[c5]"></a>CSetAlarmFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGet_KeyValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[177]"></a>CGetAlarmFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAlarmInfo
</UL>

<P><STRONG><a name="[12b]"></a>SetReleaseFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[133]"></a>GetReleaseFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[6a]"></a>SetFlag_195</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF195
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>GetFlag_195</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF195
</UL>

<P><STRONG><a name="[142]"></a>SetCirAddrCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareCirAddr
</UL>

<P><STRONG><a name="[141]"></a>GetCirAddrCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[fb]"></a>CompareCirAddr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ccompara.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompareCirAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCirAddrCurrent
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
</UL>

<P><STRONG><a name="[14c]"></a>ClrCirAlarmData</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, ccompara.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClrCirAlarmData
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSum
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDisplay_alarm_flag
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFirstAlarm_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
</UL>

<P><STRONG><a name="[128]"></a>SetCirAlarmData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[151]"></a>GetCirAlarmData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sel_Addr_fire
</UL>

<P><STRONG><a name="[fc]"></a>CirAlarmDataInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[124]"></a>SetFlagLed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[277]"></a>GetFlagLed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ccompara.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>SetAlarm_Circuit_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, caddresscount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[155]"></a>AddCirCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, caddresscount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAddrCounter
</UL>

<P><STRONG><a name="[156]"></a>GetCirCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, caddresscount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Alarm
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAddrCounter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
</UL>

<P><STRONG><a name="[14f]"></a>Compare_Address</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Compare_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Alarm
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sel_Addr_fire
</UL>

<P><STRONG><a name="[150]"></a>Sel_Addr_fire</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sel_Addr_fire &rArr; Compare_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Address
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCirAlarmData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_6mA
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAddrCounter
</UL>

<P><STRONG><a name="[153]"></a>Check_Addr</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Check_Addr &rArr; Compare_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_0mA
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Address
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCirAlarmData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_6mA
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAddrCounter
</UL>

<P><STRONG><a name="[85]"></a>CirAddrCounter</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CirAddrCounter &rArr; Check_Addr &rArr; Compare_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer0Counter
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrTimer0Counter
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Addr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sel_Addr_fire
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCirCounter
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCirCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT3_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>Reset_Alarm</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Reset_Alarm &rArr; Compare_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer0Counter
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Address
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCirCounter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>Clr_Alarm</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clr_Alarm &rArr; ClrCirAlarmData
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Relay_Off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire_Relay_Off
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_Off
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fire_Off
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCirCounter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCirAlarmData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMenuFlag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDatatoFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Task
</UL>

<P><STRONG><a name="[92]"></a>CirSendAlarmInfo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CirSendAlarmInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer0Counter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_20mA
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>CirSendFireInfo</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, caddresscount.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CirSendFireInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimer0Counter
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_0mA
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_20mA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_6mA
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[278]"></a>SaveData195</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, csendto195.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>GetData195</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, csendto195.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>Uart0Com</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, csendto195.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart0Com &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF195
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[15f]"></a>CS0Setup</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, runfunction.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
</UL>

<P><STRONG><a name="[15b]"></a>SendHeart</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, runfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendHeart &rArr; CModFault &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmFlag
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartTick
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeartTick
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeartFaultFlag
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS0Setup
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartFaultFlag
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMenuFlag
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CModFault
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Task
</UL>

<P><STRONG><a name="[160]"></a>Systemp_Task</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, runfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Systemp_Task &rArr; Sure_Task &rArr; CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGet_KeyValue
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Silence_Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[167]"></a>DisplayKeyMenu</STRONG> (Thumb, 684 bytes, Stack size 56 bytes, runfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = DisplayKeyMenu &rArr; Systemp_Task &rArr; Sure_Task &rArr; CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Silence_Off
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPasswordFlag
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplay_alarm_flag
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSetAlarmFlag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGet_KeyValue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrBackValue
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBackValue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Displaynumber
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetE1_flag
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrE1_flag
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPasswordFlag
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGrapCount
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMenuFlag
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetReleaseFlag
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMenuFlag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCheckInfoFlag
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getalarmtime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getdisplay_alarm
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Task
</UL>

<P><STRONG><a name="[43]"></a>Run_Task</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, runfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Run_Task &rArr; DisplayKeyMenu &rArr; Systemp_Task &rArr; Sure_Task &rArr; CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleAnnFun
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>CSaveHist</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, runfunction.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHistToFlash
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPageConter
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistFlag
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHistConter
</UL>

<P><STRONG><a name="[174]"></a>BreezeAlarm</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, runfunction.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmFlag
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breeze_Controll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSpeaker_Alarm
</UL>

<P><STRONG><a name="[94]"></a>HF195</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, runfunction.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HF195 &rArr; Uart0Com &rArr; UARTSend
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFlag_195
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFlag_195
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0Com
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>DisplayAlarmInfo</STRONG> (Thumb, 598 bytes, Stack size 48 bytes, runfunction.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGetAlarmFlag
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmInfoFlag
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlarmInfo
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
</UL>

<P><STRONG><a name="[161]"></a>Back_Task</STRONG> (Thumb, 610 bytes, Stack size 48 bytes, tasklist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Back_Task &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegNum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegDep
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegParaSel
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegParaSel
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCompRegParaSel
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalParaSel
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalParaSel
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLocalParaSel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Annotate_Menu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenFlag
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntenFlag
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIntenFlag
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusFlag
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusFlag
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStatusFlag
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusComp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusDep
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnSel
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddAnnSel
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnnSel
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnCompNum
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAnnDep
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSelTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSelTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecond
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMintue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHour
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMonth
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYear
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComSetSel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSel
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComSetSel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSelSet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetNum
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetDep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
</UL>

<P><STRONG><a name="[162]"></a>Up_Task</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasklist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Up_Task &rArr; Level3_Up &rArr; Level32_Up &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCounter1
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter1
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Up
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainGrap
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGrapCount
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
</UL>

<P><STRONG><a name="[163]"></a>Down_Task</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasklist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Down_Task &rArr; Level3_Down &rArr; Level32_Down &rArr; History_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter1
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level4_Down
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Down
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMainGrap
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGrapCount
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCounter1
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
</UL>

<P><STRONG><a name="[164]"></a>Sure_Task</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, tasklist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Sure_Task &rArr; CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGrapCount
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel4_Sure
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel27_Sure
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGrapCount
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
</UL>

<P><STRONG><a name="[165]"></a>Return_Task</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tasklist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Return_Task &rArr; CLevel1_Return &rArr; Main_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDisplay_alarm_flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubGrapCount
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter1
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGrapCount
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Return
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Return
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Return
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGrapCount
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMenuFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
</UL>

<P><STRONG><a name="[166]"></a>Silence_Task</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasklist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systemp_Task
</UL>

<P><STRONG><a name="[1c8]"></a>SetZjFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctasksure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
</UL>

<P><STRONG><a name="[95]"></a>GetZjFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctasksure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>SetAnnUartFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctasksure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Return
</UL>

<P><STRONG><a name="[68]"></a>GetAnnUartFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctasksure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>MaskPSNInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MaskPSNInit &rArr; M25P80_Read_1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[1b4]"></a>GetMaskPSN</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctasksure.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Read_1Byte
</UL>

<P><STRONG><a name="[1b5]"></a>SaveMaskPSN</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SaveMaskPSN &rArr; M25P80_Write_1Byte &rArr; M25P80_WP_En &rArr; M25P80_CMD1B_S1B
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Write_1Byte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Sure
</UL>

<P><STRONG><a name="[126]"></a>CGetMaskPSN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctasksure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[1ab]"></a>CLevel27_Sure</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLevel27_Sure &rArr; Speaker_Open_Close &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker_Open_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
</UL>

<P><STRONG><a name="[1a7]"></a>CLevel1_Sure</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CLevel1_Sure &rArr; GetSetGrap &rArr; Set_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Relay_Off
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fire_Relay_Off
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fault_Off
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Fire_Off
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarmFlag
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Stop
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnnCounterInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M25P80_Section_Erase
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTestGrap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetGrap
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckGrap
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnnUartFlag
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubGrapCount
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter1
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel27_Sure
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrCirAlarmData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMenuFlag
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCirAddrCurrent
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysReset_Menu
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waiting_menu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_OK
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskPSNInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CirAlarmDataInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmInfoInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToF_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrDatatoFlash
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPSNToFlashInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistory
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHistPara
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
</UL>

<P><STRONG><a name="[1a8]"></a>CLevel21_Sure</STRONG> (Thumb, 624 bytes, Stack size 56 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CLevel21_Sure &rArr; CompSet_Menu &rArr; GNSelect &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegAddr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegNum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegDep
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegDep
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComRegFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveAnn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMaskPSN
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSaveInfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waiting_menu
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndInt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToFlash
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSendPSNToFlash
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecond
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecond
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMintue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMintue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHour
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHour
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMonth
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMonth
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYear
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetYear
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSelSet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetNum
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetDep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
</UL>

<P><STRONG><a name="[1a9]"></a>CLevel22_Sure</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLevel22_Sure &rArr; History_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrHistCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrHisCountDown
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistoryList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusComp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusDep
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysCheckDep
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
</UL>

<P><STRONG><a name="[1aa]"></a>CLevel23_Sure</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CLevel23_Sure &rArr; CompInten_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_On
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZjFlag
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSelf_Menu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSetIntenFlag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
</UL>

<P><STRONG><a name="[1d6]"></a>SetSpeaker_Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctasksure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
</UL>

<P><STRONG><a name="[27a]"></a>GetSpeaker_Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ctasksure.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>CLevel3_Sure</STRONG> (Thumb, 1454 bytes, Stack size 88 bytes, ctasksure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CLevel3_Sure &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegNum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegDep
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegParaSel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComRegFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalParaSel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_Set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJBHZK
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartCom
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConvertdata
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMaskPSN
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToFlash
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToArray
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDepCompSum
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDatatoFlash
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDatatoFlash
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRow
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSendPSNToFlash
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAmendPSNToFlash
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSum
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDepComp
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenComp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenDep
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusFlag
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusComp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusDep
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysCheckDep
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysCheckDep
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecond
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMintue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHour
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMonth
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSelSet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetNum
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetDep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegAddr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
</UL>

<P><STRONG><a name="[1ad]"></a>CLevel4_Sure</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctasksure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
</UL>

<P><STRONG><a name="[1a0]"></a>GetMainGrap</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, cgetgrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetMainGrap &rArr; Main_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
</UL>

<P><STRONG><a name="[1b6]"></a>GetSetGrap</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cgetgrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetSetGrap &rArr; Set_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[1b8]"></a>GetCheckGrap</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cgetgrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetCheckGrap &rArr; Check_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[1b9]"></a>GetTestGrap</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cgetgrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetTestGrap &rArr; Test_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
</UL>

<P><STRONG><a name="[1af]"></a>CLevel1_Return</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, ctaskreturn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CLevel1_Return &rArr; Main_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnnUartFlag
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter2
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
</UL>

<P><STRONG><a name="[1b0]"></a>CLevel21_Return</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ctaskreturn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CLevel21_Return &rArr; Set_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegParaSel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComRegFlag
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalParaSel
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSelTime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComSetSel
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter3
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
</UL>

<P><STRONG><a name="[1b1]"></a>CLevel22_Return</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ctaskreturn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CLevel22_Return &rArr; Check_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrHistCount
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrHisCountDown
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Menu
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter3
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
</UL>

<P><STRONG><a name="[1b2]"></a>CLevel23_Return</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ctaskreturn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CLevel23_Return &rArr; Test_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Off
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZjFlag
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSetIntenFlag
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter3
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
</UL>

<P><STRONG><a name="[1b3]"></a>CLevel3_Return</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctaskreturn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLevel3_Return
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter3
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter3
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
</UL>

<P><STRONG><a name="[27b]"></a>CLevel4_Return</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ctaskreturn.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>SetCounter1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
</UL>

<P><STRONG><a name="[1a3]"></a>AddCounter1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
</UL>

<P><STRONG><a name="[19e]"></a>SubCounter1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
</UL>

<P><STRONG><a name="[17a]"></a>GetCounter1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Up
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Down
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Return
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
</UL>

<P><STRONG><a name="[1d2]"></a>SetCounter2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Return
</UL>

<P><STRONG><a name="[1d5]"></a>AddCounter2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
</UL>

<P><STRONG><a name="[1f3]"></a>SubCounter2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
</UL>

<P><STRONG><a name="[17b]"></a>GetCounter2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Up
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level2_Down
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Return
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>

<P><STRONG><a name="[1d3]"></a>SetCounter3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Return
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel23_Return
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Return
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel21_Return
</UL>

<P><STRONG><a name="[27c]"></a>AddCounter3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>SubCounter3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>GetCounter3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level4_Down
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Return
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level4_Up
</UL>

<P><STRONG><a name="[16d]"></a>SetGrapCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[27e]"></a>AddGrapCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>SubGrapCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
</UL>

<P><STRONG><a name="[27f]"></a>ClrGrapCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ckeycounter.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>GetGrapCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sure_Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
</UL>

<P><STRONG><a name="[280]"></a>AddMenuFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>SubMenuFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ckeycounter.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>GetMenuFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[12d]"></a>SetMenuFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel1_Sure
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Task
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHeart
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartComHandle
</UL>

<P><STRONG><a name="[16b]"></a>SetPasswordFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[c6]"></a>GetPasswordFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ckeycounter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGet_KeyValue
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayKeyMenu
</UL>

<P><STRONG><a name="[1c5]"></a>ClrHisCountDown</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctaskdown.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Return
</UL>

<P><STRONG><a name="[1c6]"></a>ClrHistCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctaskdown.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Sure
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel22_Return
</UL>

<P><STRONG><a name="[1a4]"></a>Level2_Down</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ctaskdown.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Level2_Down &rArr; GetSetGrap &rArr; Set_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTestGrap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetGrap
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckGrap
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeaker_Counter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel27_Sure
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCounter2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter2
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
</UL>

<P><STRONG><a name="[1d7]"></a>Level33_Down</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ctaskdown.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Level33_Down &rArr; CompInten_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenFlag
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenComp
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubIntenComp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenDep
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubIntenDep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Down
</UL>

<P><STRONG><a name="[1da]"></a>Level32_Down</STRONG> (Thumb, 820 bytes, Stack size 56 bytes, ctaskdown.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Level32_Down &rArr; History_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPSNFormFlash
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistoryList
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHistConter
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusFlag
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusComp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusComp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubStatusComp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusDep
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusDep
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubStatusDep
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysCheckDep
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubSysCheckDep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Down
</UL>

<P><STRONG><a name="[1e0]"></a>Level31_Down</STRONG> (Thumb, 882 bytes, Stack size 48 bytes, ctaskdown.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Level31_Down &rArr; CompSet_Menu &rArr; GNSelect &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCompRegAddr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegAddr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegNum
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCompRegNum
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegNum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegDep
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCompRegDep
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegDep
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegParaSel
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalParaSel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubLocalAddr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecond
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubSecond
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecond
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMintue
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubMintue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMintue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHour
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubHour
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHour
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDay
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMonth
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubMonth
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMonth
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYear
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubYear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSelSet
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubComSetSelSet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComSetSelSet
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompSetNum
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetNum
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCompSetNum
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompSetDep
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetDep
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCompSetDep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Down
</UL>

<P><STRONG><a name="[1a5]"></a>Level3_Down</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ctaskdown.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Level3_Down &rArr; Level32_Down &rArr; History_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Down
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Down
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Down
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
</UL>

<P><STRONG><a name="[1a6]"></a>Level4_Down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ctaskdown.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Level4_Down
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter3
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Down_Task
</UL>

<P><STRONG><a name="[1a1]"></a>Level2_Up</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ctaskup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Level2_Up &rArr; GetSetGrap &rArr; Set_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTestGrap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetGrap
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCheckGrap
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeaker_Counter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel27_Sure
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubCounter2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCounter2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
</UL>

<P><STRONG><a name="[1f4]"></a>Level33_Up</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ctaskup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Level33_Up &rArr; CompInten_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenFlag
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenComp
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntenComp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIntenComp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntenDep
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIntenDep
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddIntenDep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Up
</UL>

<P><STRONG><a name="[1f9]"></a>Level32_Up</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, ctaskup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Level32_Up &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSum
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusFlag
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusComp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusComp
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStatusComp
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusDep
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStatusDep
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddStatusDep
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysCheckDep
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysCheckDep
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSysCheckDep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Up
</UL>

<P><STRONG><a name="[1fd]"></a>Level31_Up</STRONG> (Thumb, 858 bytes, Stack size 48 bytes, ctaskup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Level31_Up &rArr; CompSet_Menu &rArr; GNSelect &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCompRegAddr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegAddr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegNum
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCompRegNum
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegNum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegDep
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCompRegDep
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompRegDep
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegParaSel
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalDepSum
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLocalDepSum
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalDepSum
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalParaSel
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLocalAddr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLocalAddr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearScreen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter2
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSendToF
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSelTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecond
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSecond
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSecond
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMintue
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMintue
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMintue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHour
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddHour
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHour
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDay
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddDay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMonth
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMonth
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMonth
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetYear
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddYear
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComSetSelSet
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddComSetSelSet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetComSetSelSet
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompSetNum
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetNum
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCompSetNum
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCompSetDep
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompSetDep
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCompSetDep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCompRegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level3_Up
</UL>

<P><STRONG><a name="[1a2]"></a>Level3_Up</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctaskup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Level3_Up &rArr; Level32_Up &rArr; CompStat_Menu &rArr; DisplayJBHZK &rArr; SetColumn &rArr; SendCommandToLCD &rArr; CheckState &rArr; DATAout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter1
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level31_Up
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level32_Up
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level33_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Task
</UL>

<P><STRONG><a name="[20c]"></a>Level4_Up</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ctaskup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCounter3
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLevel3_Sure
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;History_Menu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompInten_Menu
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCheck_Menu
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompStat_Menu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateMod_Menu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompSet_Menu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSelect
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSelectBlack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompReg_menu
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Local_Menu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Menu
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Menu
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Menu
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breakdown
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Low
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Menu
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[40]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[285]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[288]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntStart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[55]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntStart
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Init
</UL>

<P><STRONG><a name="[6e]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntStart
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[6d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntStart
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[70]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntEnd
</UL>

<P><STRONG><a name="[7b]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint_En
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint3_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint1_Init
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint_En
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint3_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint1_Init
</UL>

<P><STRONG><a name="[7e]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eint_Dis
</UL>

<P><STRONG><a name="[89]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CTime1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CTime0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[88]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ctime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CTime1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CTime0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
